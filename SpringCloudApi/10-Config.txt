分布式配置中心 SpringCloud Config
微服务意味着要将单体应用中的业务拆分成一个个子服务 每个服务的粒度相对较小 因此系统中会出现大量的服务
由于每个服务都需要必要的配置信息才能运行 配置文件过多不利于修改和管理 所以需要一套集中式的动态的配置管理设施是必不可少的
SpringCloud提供了ConfigServer来解决这个问题 为微服务架构中的微服务提供集中化的外部配置支持 配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置

SpringCloud Config分为服务端和客户端
    服务端也称为分布式配置中心 它是一个独立的微服务应用 用来连接配置服务器并为客户端提供获取配置信息 加密/解密信息等访问接口
    客户端则是通过指定的配置中心来管理应用资源 以及和业务相关的配置内容 并在启动时从配置中心获取和加载配置信息
    配置服务器默认是采用Git存储配置信息 这样就有助于对环境配置进行版本管理 并且可以通过Git客户端工具来方便管理和访问配置内容
用途
    集中管理配置文件
    不同环境不同配置 动态化的配置更新 分环境部署如dev/test/prod/beta/release
    运行期间动态调整配置 不再需要在每个服务部署的机器上编写配置文件 服务会向配置中心统一拉取配置自己的信息
    当配置发生变动时 服务不需要重启即可感知到配置的变化并应用新的配置
    将配置信息以REST接口的形式暴露

Config服务端配置
    修改Windows hosts文件 127.0.0.1 config-3344.com
    配置文件读取规则
        /{label}/{application}-{profile}.yml
        /{application}-{profile}.yml 默认读取master分支
        /{application}/{profile}/[{label}]
    /{label}-{name}-{profiles}.yml label（分支） name（服务名） profiles（环境dev/test/prod）
Config客户端配置
    application.yml是用户级的资源配置项 bootstrap.yml是系统级的资源配置项 bootstrap优先级更高 bootstrap.yml比application.yml先加载
    将Client模块下的application.yml文件改为bootstrap.yml作为配置文件 为了配置文件的加载顺序和分级管理
    SpringCloud会创建一个Bootstrap Context 作为Spring应用的Application Context的父上下文 初始化时Bootstrap Context负责从外部源加载配置属性并解析配置
    Bootstrap属性有高优先级 默认情况下 它不会被本地配置覆盖 Bootstrap Context和Application Context有着不同的约定
    新增bootstrap.yml文件 保证Bootstrap Context和Application Context配置分离
Config客户端配置（动态刷新手动版）
    GitHub上修改配置文件之后 3344会随之变化 3355不会随之变化 需要配置动态刷新 避免每次更新配置都需要重启客户端
    1.在Client中添加web和actuator监控
    2.修改yml 暴露监控端口
    3.修改controller 添加刷新注解标签 @RefreshScope 自动获取刷新内容
    需要发送Post请求刷新3355 curl -X POST "http://localhost:3355/actuator/refresh" 避免了服务重启
    如果需要一次通知 处处生效 精确打击 差异化处理 需要消息总线Bus