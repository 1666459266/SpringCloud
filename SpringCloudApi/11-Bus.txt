消息总线 SpringCloud Bus 是对Config的加强（广播型的自动版的动态刷新） 实现分布式的自动刷新配置功能
Bus只支持RabbitMQ和Kafka 能管理和传播分布式系统间的消息 就像一个分布式执行器 可用于广播状态更改 事件推送 也可以当做微服务间的通信通道
什么是总线
    在微服务架构中 通常会使用轻量级的消息代理来构建一个共用的消息主题 并让系统中所有服务实例都连接上来
    由于该主题中产生的消息会被所有实例监听和消费 所以被称为消息总线 在总线的各个实例上 都可以方便的广播一些需要让其他连接在该主题上的实例都知道的消息
基本原理
    ConfigClient实例都监听MQ中同一个Topic（默认是SpringCloudBus）当一个服务刷新数据时 会把这个信息放入Topic 其他监听同一Topic服务就能得到通知并更新自身配置
设计思想
    1.利用消息总线触发一个客户端/bus/refresh 而刷新所有客户端配置
    2.利用消息总线触发一个服务端ConfigServer的/bus/refresh端点 而刷新所有客户端配置（架构更合适）
    第一种模式 1.打破了微服务的职责单一性 因为微服务本身是业务模块 它本不应该承担配置刷新的职责 2.破坏了微服务各节点的对等性 3.有一定局限性

动态刷新全局广播
    配置中心3344添加消息总线支持 修改pom（添加消息总线RabbitMQ支持）和yml（添加MQ相关支持 暴露Bus刷新配置的端点）
    配置中心3355添加消息总线支持 修改pom（添加消息总线RabbitMQ支持）和yml（添加MQ相关支持）
    配置中心3366添加消息总线支持 修改pom（添加消息总线RabbitMQ支持）和yml（添加MQ相关支持）
    发送POST请求 curl -X POST "http://localhost:3344/actuator/bus-refresh" 一次修改 广播通知 处处生效
动态刷新定点通知
    不想全部通知 只想定点通知 指定某一个具体实例生效而不是全部
    http://localhost:配置中心端口号/actuator/bus-refresh/{destination} 发送到ConfigServer并通过destination参数类指定需要更新配置的服务或实例
    destination = 微服务名称:端口