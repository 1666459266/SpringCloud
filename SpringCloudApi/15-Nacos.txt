SpringCloud Alibaba Nacos 服务注册和配置中心 Nacos = Eureka + Config + Bus
是一个更易于构建云原生应用的动态服务发现 配置管理和服务管理平台（注册中心+配置中心的组合） 替代Eureka做服务注册中心 替代Config做服务配置中心
Nacos自带了负载均衡功能 支持AP和CP模式切换 支持控制台管理 访问localhost:8848/nacos进入控制台
临时实例 非持久化 摘除不健康实例 客户端上报健康状态
持久化实例 持久化 保留不健康实例 服务端探测健康状态
如果不需要存储服务级别的信息且服务实例是通过nacos-client注册 并能保持心跳上报 则选择AP模式 AP模式为了服务可用性减弱了一致性 因此只支持注册临时实例
如果需要在服务级别编辑或者存储配置信息 则选择CP模式 CP模式支持注册持久化实例 如果服务不存在则会报错

Nacos作为服务配置中心（基础配置） 需要两个配置文件 application.yml和bootstrap.yml bootstrap优先级高于application
Nacos在项目初始化时 先从配置中心进行配置拉取 拉取配置之后才能保证项目的正常运行
Nacos的匹配规则
    Data ID的完整格式 ${prefix}-${spring.profile.active}.${file-extension}
    prefix默认为spring.application.name的值 可以通过spring.cloud.nacos.config.prefix
    spring.profile.active表示当前环境对应的profile 当spring.profile.active为空时对应连接符-也将不存在 格式变为${prefix}.${file-extension}
    file-extension为配置内容的数据格式 可以通过spring.cloud.nacos.config.file-extension来配置（只支持properties和yaml类型）

Nacos作为服务配置中心（分类配置）
    Namespace+Group+Data ID三者关系 最外层的namespace用于区分部署环境 Group和DataID逻辑上区分两个目标
        Namespace = public Group = DEFAULT_GROUP
        Nacos默认的命名空间是public Namespace主要是用来实现隔离（开发 测试 生产就可以创建三个Namespace）不同的Namespace之间是隔离的
        Group默认是DEFAULT_GROUP 可以把不同的微服务划分到同一个分组里
    DataID方案 application.yml指定spring.profile.active和配置文件DataID来使不同环境下读取不同的配置
    Group方案 bootstrap.yml在config下增加一条group的配置（DEV_GROUP或TEST_GROUP） application.yml指定读取的配置
    Namespace方案 bootstrap.yml在config下增加namespace和group的配置 application.yml指定读取的配置

默认Nacos使用嵌入式数据库实现数据的存储derby 如果启动多个默认配置下的Nacos节点 数据存储存在一致性问题
Nacos采用了集中式存储的方式来支持集群化部署 目前支持是MySQL的存储
Nacos支持三种部署模式 单机模式 集群模式 多集群模式
切换derby到mysql
    在/nacos/conf目录下找到sql脚本并运行 nacos-mysql.sql
    修改/nacos/conf目录下application.properties 支持MySQL
Nacos集群 1个Nginx+需要3个或3个以上Nacos注册中心+1个MySQL
    在/nacos/conf目录下找到sql脚本并运行 nacos-mysql.sql
    修改/nacos/conf目录下application.properties 支持MySQL
    Linux服务器上nacos的集群配置/nacos/conf/cluster.conf
        192.168.2.202:3344
        192.168.2.202:3355
        192.168.2.202:3366
        说明这三个是一个集群节点 IP不能为127.0.0.1 必须是Linux命令hostname -i能够识别的IP
    修改Linux里面的Nacos脚本startup.sh 能够接受不同端口启动 startup -p 端口号（端口号与cluster.conf配置的一致）
        改为While getopts ":m:f:s:p:" opt
            p)
                PORT=$OPTARG;;
        改为nohup $JAVA -Dserver.port=${PORT} ${JAVA_OPT} nacos.nacos >> ${BASE_DIR}/logs/start.out 2>&1 &
    Nginx的配置作为负载均衡器
        修改Nginx配置文件
            upstream cluster{
                server 127.0.0.1:3344;
                server 127.0.0.1:3355;
                server 127.0.0.1:3366;
            }
            server{
                listen  1111;
                server_name localhost;
                location{
                    proxy_pass http://cluster;
                }
            }
    测试通过Nginx访问Nacos 192.168.2.202:1111/nacos/#/login
    将微服务注册进Nacos集群
        server-addr: 192.168.2.202:1111 将yml修改为Nginx的1111端口做集群 由Nginx转发到Nacos集群