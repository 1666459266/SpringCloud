SpringCloud Alibaba Sentinel 实现熔断与限流（分布式系统的流量防卫兵）
面向云原生微服务的流量控制 熔断降级组件 能够监控保护你的微服务
应用场景 秒杀 消息削峰填谷 集群流量控制 实时熔断下游不可用应用
Sentinel主要特性
    Sentinel控制台 实时监控 机器发现 规则配置
    流量控制 线程数隔离 慢调用降级 调用链路 速率控制 集群限流 异常熔断 系统自适应保护 调用关系限流 热点限流 削峰填谷 来源访问控制
    动态配置规则 Zookeeper Nacos Apollo
    解决服务中的各种问题 服务雪崩 服务降级 服务熔断 服务限流
Sentinel分为两个部分
    核心库（Java客户端） 不依赖于任何框架/库 能运行于所有Java运行时环境 同时对Dubbo/SpringCloud等框架也有较好的支持
    控制台（Dashboard） 基于SpringBoot开发 打包后可以直接运行 不需要额外的Tomcat等应用容器
使用java -jar执行jar包（8080端口不能被占用） 访问localhost:8080
Sentinel采用懒加载机制 执行一次访问即可

流控规则
    资源名：唯一名称 默认请求路径
    针对来源：Sentinel可以针对调用者进行限流 填写微服务名称 默认default（不区分来源）
    阈值类型/单击阈值
        QPS（每秒钟的请求数量） 当调用该API的QPS达到阈值的时候 进行限流
        线程数 当调用该API的线程数达到阈值的时候 进行限流
    是否集群 不需要集群
    流控模式
        直接：API达到限流条件时 直接限流（默认）
            QPS 单机阈值=1 直接 快速失败（一秒钟请求一次则成功 如果超过一次直接失败 报默认错误）
            线程数 单机阈值=1  直接（一个线程池内请求能处理则成功 否则报默认错误）
            QPS请求还没进来就已经被拦截并报错 线程数是指请求已经进来但线程数只有一个
        关联：当关联的资源达到阈值时 就限流自己（当与A关联的资源B达到阈值后 就限流A自己）
            关联 直接 快速失败 关联资源/testB的QPS阈值超过1时就限流/testA的Rest访问地址 当关联资源达到阈值后限制配置好的资源名
            应用场景：支付接口达到阈值以后限流下订单的接口
        链路：只记录指定链路上的流量（指定资源从入口资源进来 如果达到阈值 就进行限流）API级别的针对来源
            链路 直接 快速失败 入口资源填写/testA的入口资源地址 一秒内请求超过一次就会限流 其他微服务请求/testA 一秒内请求超过一次也会限流
    流控效果
        快速失败：直接失败 抛异常（默认）
            Blocked by Sentinel（flow limiting）
        Warm up：根据codeFactor（冷加载因子 默认3）的值 从阈值/codeFactor 经过预热时长 才达到设置的QPS阈值
            预热（冷启动方式） 阈值除以coldFactor（默认为3）经过预热时长后才会到达阈值
            当系统长期处于低水位的情况下 流量突然增加 直接把系统拉升到高水位可能瞬间把系统压垮
            通过冷启动让通过的流量缓慢增加 在一定时间内逐渐增加到阈值上限 给冷系统一个预热时间 避免冷系统被压垮
            请求QPS从（单机阈值/3）开始 经过预热时长才逐渐升至设定的QPS阈值
            应用场景：秒杀系统在开启的瞬间可能会有很多流量上来 很有可能把系统打死 预热方式就是为了保护系统
        排队等待：匀速排队 让请求以匀速的速度通过 阈值类型必须设置为QPS 否则无效
            请求每秒请求一次 超过的话就排队等待 超时时间自设（对应漏桶算法）主要处理间隔性突发的流量
            应用场景：某一秒有大量请求 接下来几秒处于空闲 系统在接下来的空闲期间逐渐处理这些请求

降级规则（Sentinel断路器没有半开状态）
    RT（秒级）
        平均响应时间超过阈值且时一秒内通过的请求>=5 两个条件同时满足触发降级
        时间窗口结束后关闭断路器 RT最大为4900(更大需要设置-Dcsp.sentinel.statistic.max.rt=*****才能生效)
        RT（平均响应时间）规定的时间内必须相应完成 超过预设时间还没处理完 会在指定的时间窗口内打开断路器 微服务不可用
    异常比例（秒级） QPS>=5且异常比例（秒级统计）超过阈值时 触发降级 时间窗口结束后 关闭降级
        异常比例为0.0~1.0（0%~100%）之间 异常比例大于设定的阈值 会在指定的时间窗口内打开断路器 微服务不可用
    异常数（分钟级） 异常数（分钟统计）超过阈值时 触发降级 时间窗口结束后 关闭降级
        一分钟内异常数量超过阈值之后会进行熔断 由于统计窗口时间是分钟级别的（若小于60秒 结束熔断之后可能会再次进入熔断 所以时间窗口一定要大于等于60秒）

热点规则（限流模式支持是QPS模式）
    热点参数限流会统计传入参数中的热点参数 并根据配置的限流阈值与模式 对包含热点参数的资源调用进行限流
    资源名称为@SentinelResource的value值 传入的参数索引从0开始 不配置的参数则不进行限流
    参数例外项（一般情况下超过阈值马上限流 当参数是某个特殊值的时限流值和普通不一样）参数类型只支持八种基本数据类型
    应用场景（普通用户和VIP用户）

系统规则
    系统自适应限流从整体维度对应用入口进行控制 结合应用的Load CPU使用率 总体平均RT 入口QPS 并发线程等几个维度的监控指标
    通过自适应的流控策略 让系统入口流量和系统的负载达到一个平衡 让系统保持最大吞吐量的同时保证系统稳定性
    支持的模式
        Load自适应（仅对Linux和unix-like机器生效）系统的Load1作为启发指标 进行自适应系统保护
        CPU usage 当系统CPU使用率超过阈值即触发系统保护 0.0~1.0
        平均RT 当单台机器上所有的入口流量的RT达到阈值即触发系统保护 单位是毫秒
        并发线程数 当单台机器上所有的入口流量的并发线程达到阈值即触发系统保护
        入口QPS 当单台机器上所有的入口流量的QPS达到阈值即触发系统保护

自定义的处理方法与业务代码耦合 每一个业务方法都需要一个异常方法导致代码膨胀
在@SentinelResource通过blockHandlerClass指定自定义处理异常的类 通过blockHandler指定自定义处理异常的方法
@SentinelResource注解属性 注解方式埋点不支持private方法
    value 资源名称（必须项不能为空）
    entryType entry类型（可选项 默认为EntryType.OUT）
    blockHandler 对应处理的方法名称
    blockHandlerClass 对应类的Class对象 必须是static函数 否则无法解析
    fallback 用于抛出异常时提供fallback处理逻辑
    defaultFallback 默认fallback可以针对所有类型的异常 如果同时配置fallback和defaultFallback 只有fallback生效
    exceptionsToIgnore 用于指定那些异常被排除掉 不会计入异常统计 也不会进入fallback逻辑中 只会原样抛出
Sentinel有三个核心的API SphU定义资源 Tracer定义统计 ContextUtil定义上下文

服务熔断 Sentinel整合Ribbon+OpenFeign+Fallback
    @SentinelResource fallback 如果有程序异常 就会找fallback指定的方法
    @SentinelResource fallback和blockHandler同时配 如果同时违规 遵循sentinel控制台配置的违规
    @SentinelResource exceptionsToIgnore 异常忽略 程序内部出错依旧返回异常页面

Sentinel持久化规则
    一旦重启应用 sentinel规则将消失 生产环境需要将配置规则进行持久化
    将限流配置规则持久化进Nacos保存 只要刷新8401某个rest地址 sentinel控制台的流控规则就能看到
    只要Nacos里面的配置不删除 针对8401上sentinel上的流控规则持续有效
    Nacos新建配置规则 DataID为服务名 格式为Json 重启8401后刷新-->流控规则已经持久化
    [
        {
            "resource": "/rateLimit/byUrl",
            "limitApp": "default",
            "grade": 1,
            "count": 1,
            "strategy": 0,
            "controlBehavior": 0,
            "clusterMode": false
        }
    ]
    resource 资源名称
    limitApp 来源应用
    grade 阈值类型 0表示线程数 1表示QPS
    count 单机阈值
    strategy 流控模式 0表示直接 1表示关联 2表示链路
    controlBehavior 流控效果 0表示快速失败 1表示Warm Up 2表示排队等待
    clusterMode 是否集群