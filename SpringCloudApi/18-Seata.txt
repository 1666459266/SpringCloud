SpringCloud Alibaba Seata 处理分布式事务 从1:1-->1:N-->N:N
单体应用被拆分成微服务应用 原来的三个模块被拆分成三个独立的应用 分别使用三个独立的数据源
业务操作需要调用三个服务完成 每个服务内部的数据一致性由本地事务保证 但全局的一致性问题没法保证
一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用 就会产生分布式事务的问题
Seata是一款开源的分布式事务解决方案 致力于在微服务架构下提供高性能和简单易用的分布式事务服务
典型的分布式事务过程
    分布式事务处理过程的ID+三组件模型
        Transaction ID XID 全局唯一的事物ID
        三组件
            Transaction Coordinator（TC）事物协调器 维护全局事务的运行状态 负责协调并驱动全局事务的提交或回滚
            Transaction Manager（TM）事务管理器 控制全局事务的边界 负责开启一个全局事务 并最终发起全局提交或全局回滚的决议
            Resource Manager（RM）资源管理器 控制分支事务 负责分支注册 状态汇报 并接受事务协调器的指令 驱动分支（本地）事务的提交和回滚
    处理过程
        TM向TC申请开启一个全局事务 全局事务创建成功并生成一个全局唯一的XID
        XID在微服务调用链路的上下文中传播
        RM向TC注册分支事务 将其纳入XID对应全局事务的管辖
        TM向TC发起针对XID的全局提交和回滚决议
        TC调度XID下管辖的全部分支事务完成提交或回滚请求
本地@Transactional 全局@GlobalTransactional（只需要使用该注解在业务方法上）

需要修改conf目录下的file.conf配置文件 修改自定义事务组名称+事务日志存储模式为db+数据库连接信息
创建seata数据库 在seata库中建表（分支 全局 锁）-->sql在conf目录中db_store.sql
修改conf目录下的registry.conf配置文件 指明注册中心为Nacos 修改Nacos连接信息

三个微服务 一个订单服务 一个库存服务 一个账户服务（跨越三个数据库 有两次远程调用 存在分布式事务问题）
当用户下单时 会在订单服务中创建一个订单 然后通过远程调用库存来扣减下单商品的库存
再通过远程调用账户服务来扣减用户账户里面的余额
最后在订单服务中修改订单状态已完成
三个数据库 对应的业务表 对应的回滚日志表sql在conf目录中db_undo_log.sql
业务需求 下订单-->减库存-->扣余额-->改（订单）状态
测试
    正常情况 所有业务逻辑都正常
    超时异常 没加@GlobalTransactional 库存和账户金额都被扣减 但订单状态并未改变（Feign具有重试机制 有可能还会多次扣减）
    超时异常 添加@GlobalTransactional 库存 金额 订单并未发生任何变化 发生异常-->事件回滚