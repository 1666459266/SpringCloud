什么是服务治理
	SpringCloud封装了Eureka模块实现服务治理
	传统的RPC调用框架中 管理每个服务与每个服务之间依赖关系比较复杂 管理比较复杂 所以需要使用服务治理
	管理服务与服务之间的依赖关系 可以实现服务调用，负载均衡，容错等 实现服务发现与注册
什么是服务注册
	Eureka采用了CS的设计架构 Eureka Server作为服务注册功能的服务器 它是服务注册中心
	系统中的其他微服务 使用Eureka的客户端连接到Eureka Server并维持心跳连接
	系统维护人员通过Eureka Server来监控系统中各个微服务是否正常运行
	在服务注册与发现中 有一个注册中心 当服务启动时 会把自己的服务器信息（如服务地址通讯地址）以别名的方式注册到注册中心上
	另一方（消费者|服务提供者）以该别名的方式去注册中心获取到实际的服务通讯地址 然后再实现本地RPC调用RPC远程调用
	框架核心设计思想：在于注册中心 使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）
	任何RPC远程框架中 都会有一个注册中心（存放服务地址相关信息（接口地址））
Eureka组件
	Eureka Server（提供服务注册服务）各个服务节点通过配置启动后 会在Eureka Server中进行注册
		      这样EurekaServer中的服务注册表中将会存储所有可用服务节点信息 服务节点的信息可以在界面中直观看到
	Eureka Client（通过注册中心进行访问）是一个Java客户端 用于简化Eureka Server的交互 客户端同时也具备一个内置的 使用轮询负载算法的负载均衡器
		      在应用启动后 将会向Eureka Server发送心跳（默认周期30秒）
		      如果Eureka Server在多个心跳周期内没有接受到某个节点的心跳 将会从服务注册表把这个服务节点移除（默认90秒）

Eureka集群
服务注册：将服务信息注册进注册中心
服务发现：从注册中心上获取服务信息
实质：存key服务名 取value调用地址
    1.先启动Eureka注册中心
    2.启动服务提供者payment支付服务
    3.支付服务启动后会把自身信息（如服务地址以别名的方式注册进Eureka）
    4.消费者order服务在需要调用接口时 使用服务别名去注册中心获取实际的RPC远程调用地址
    5.消费者获得调用地址后 底层实现是利用HttpClient技术实现远程调用
    6.消费者获得服务地址后会缓存到本地JVM中 默认每间隔30秒更新一次服务调用地址
微服务RPC远程调用服务最核心的是高可用
搭建Eureka注册中心集群 实现负载均衡+故障容错 互相注册+相互守望
    在C:\Windows\System32\drivers\etc下修改hosts文件
        127.0.0.1        eureka7001.com
        127.0.0.1        eureka7002.com
        127.0.0.1        eureka7003.com
先启动Eureka Server7001,7002,7003服务 再启动服务提供者（8001） 再启动服务消费者（80）
actuator 微服务信息完善
    主机名称：服务名称修改 只暴露服务名不暴露主机名
    访问信息有ip信息提示
服务发现Discovery 对于注册进Eureka里面的微服务可以通过服务发现来获得该服务信息

Eureka自我保护机制 主要用于一组客户端和Eureka Server之间存在网络分区场景的保护
一旦进入保护模式 Eureka Server将会尝试保护其服务注册表中的信息 不再删除服务注册表中的数据 也就是不会注销任何微服务
某时刻某一个微服务不可用了 Eureka不会立刻清理 依旧会对该微服务的信息进行保存 属于CAP里面的AP分支
产生自我保护机制的原因：为了防止EurekaClient可以正常运行 但是与EurekaServer网络不通的情况下 EurekaServer不会立刻将EurekaClient服务剔除
默认情况如果Eureka在一定时间内没有接受到某个服务实例的心跳 Eureka将会注销该实例（默认90秒）
但是当网络分区发生故障 微服务与EurekaServer之间无法正常通信 服务本身是健康的 此时不应该注销服务
Eureka通过自我保护模式来解决这个问题 当某个节点在短时间内丢失过多客户端时（可能发生了网络故障） 那么这个节点就会进入自我保护模式
宁可保留错误的服务信息 也不盲目注销任何可能健康的服务实例
禁止自我保护模式