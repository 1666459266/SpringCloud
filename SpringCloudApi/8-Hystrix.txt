服务降级Hystrix 断路器
随着系统拆分 分布式系统面临的问题 复杂的分布式系统体系结构中的应用程序有多个依赖 每个依赖关系在某些时候将不可避免的失败
多个微服务调用时 A-B-C 如果某个链路上的某个微服务调用时间过长或不可用 就会造成服务A占用越来越多的系统资源 进而引起系统崩溃
对于高流量的应用来说 单一的后端依赖可能会导致所有服务器上的资源在几秒钟内饱和 这些程序还导致服务之间延迟增加 备份队列 线程和其他系统资源紧张 导致整个系统发生故障
这些都表示需要对故障和延迟进行隔离和管理 以便单个依赖关系的失败 不能取消整个应用程序或系统

Hystrix是一个用于处理分布式系统的延迟和容错的开源库 在分布式系统中 许多依赖不可避免的会调用失败 比如超时 异常等
Hystrix能保证一个依赖出问题的情况下 不会导致整体服务失败 避免级联故障 以提高分布式系统的弹性
断路器相当于开关装置 当某个服务单元发生故障之后 通过断路器的故障监控 向调用方法返回一个符合预期的可处理的备选响应 而不是长时间等待或者抛出调用方法无法处理的异常
这样保证了服务调用方的线程不会被长时间不必要的占用 从而避免故障在分布式系统中的蔓延 甚至雪崩
Hystrix作用：服务降级 服务熔断 接近实时监控 服务限流 服务隔离

Hystrix重要概念
    服务降级 fallback 服务器忙请稍后再试 不让客户端等待并立刻返回一个友好提示
        发生降级的情况 程序运行异常 超时 服务熔断触发服务降级 线程池/信号量打满也会导致服务降级
    服务熔断 break 当达到最大服务访问之后 直接拒绝访问 然后调用服务降级的方法并返回友好提示
    服务限流 flowlimit 秒杀高并发等操作 严禁短时间内拥挤 一秒N个有序进行

当并发量达到一定程度时 Tomcat默认的工作线程数（10个线程）被打满 没有多余的线程来分解压力和处理
一般Hystrix用在消费者做降级
解决维度
    超时导致服务器变慢-->超时不再等待
    出错（宕机或程序运行出错）-->出错要兜底
解决
    服务8001超时 调用者不能一直卡死等待 必须有服务降级
    服务8001宕机 调用者不能一直卡死等待 必须有服务降级
    服务8001正常 调用者出故障或者有自我要求（等待的时间小于服务提供者）自己降级处理

服务降级
    降级配置 @HystrixCommand 使用配置代替编码
    在服务端设置自身调用超时时间的峰值 峰值内可以正常运行 超过峰值需要有兜底的方法处理 作服务降级fallback
    服务端fallback
        业务类启用 @HystrixCommand
        主启动类激活 @EnableCircuitBreaker
    客户端fallback
        热部署对Java代码改动明显 但对@HystrixCommand内属性的修改需要重启微服务
        yml开启Hystrix支持
        主启动类激活 @EnableHystrix
        业务类启用 @HystrixCommand
    存在的问题：代码的冗余 业务逻辑方法和处理异常服务降级的方法糅杂
    全局服务降级
        代码冗余 通用的和独享的处理方法分开 避免代码膨胀 合理减少代码量 @DefaultProperties(defaultFallback = "")
        代码混乱 客户端调用服务端 服务端宕机 在客户端完成降级 只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦
                 @FeignClient(value = "SPRINGCLOUD-PAYMENT-HYSTRIX",fallback = PaymentFallbackService.class)
        在客户端做服务降级处理 让客户端在服务端不可用的情况下也会获得提示信息而不会挂起耗死服务器
    常见的异常 运行 超时 宕机

服务熔断
    熔断机制是应对雪崩效应的一种微服务链路保护机制 当链路的某个微服务出错不可用或者响应时间太长时会进行服务降级 进而熔断该节点微服务的调用 快速返回错误的响应消息
    当检测到该节点微服务调用响应正常以后 恢复调用链路 熔断机制通过Hystrix实现 Hystrix会监控微服务间调用的状况
    当失败的调用达到一定的阈值 就会启用熔断机制 熔断机制的注解是@HystrixCommand 成功调用变多时 慢慢的恢复调用链路 熔断器由半开状态变为关闭状态
    熔断类型
        熔断打开 请求不再进行调用当前服务 内部设置时钟一般为MTTR 当打开时长达到所设时钟则进入半熔断状态
        熔断关闭 熔断关闭不会对服务进行熔断
        熔断半开 部分请求根据规则调用当前服务 如果请求成功且符合规则 则认为当前服务恢复正常 关闭熔断
    当满足一定的阈值（默认10秒内请求超过20次）当失败率达到一定的时候（默认10秒内超过50%失败请求） 到达以上阈值 断路器将会开启 开启后所有请求都不会进行转发
    一段时间后（默认5秒） 这个断路器是半开状态 会让其中一个请求进行转发 如果成功断路器会关闭 如果失败继续开启（重复4和5）
    断路器打开之后不会调用主逻辑 直接调用fallback 断路器实现了自动的发现错误并将降级逻辑切换为主逻辑 减少响应延迟的效果 原来主逻辑会自动恢复

Hystrix提供准实时的调用监控 Hystrix会持续的记录所有通过Hystrix发起的请求的执行信息 并以统计报表和图形的形式展示给用户 包括每秒执行多少请求 多少成功 多少失败
Netflix通过hystrix-metrics-event-stream项目实现监控 SpringCloud也提供了Hystrix Dashboard的整合 对监控内容转化成可视化界面
新版本Hystrix需要主启动类中指定监控路径 否则将会404
Success成功数 Short-Circuited熔断数 Bad Request错误请求数 Timeout超时数 Rejected线程池拒绝数 Failure失败/异常数 Error最近10s错误百分比
Circuit Closed短路状态 Host: 0.0/s服务请求频率 Thread Pools线程状态